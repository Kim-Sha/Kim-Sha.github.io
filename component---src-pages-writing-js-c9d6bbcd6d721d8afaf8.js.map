{"version":3,"sources":["webpack://kim-sha.github.io/./src/components/projects/project-tags.js","webpack://kim-sha.github.io/./src/pages/writing.js"],"names":["tags","map","tag","className","key","Writing","data","profile","blogs","useState","filteredData","query","state","setState","posts","edges","image","seo_image","childImageSharp","resize","sidebarOnMobile","title","pathname","class","id","type","placeholder","onChange","event","target","value","filter","post","node","frontmatter","description","toLowerCase","includes","join","Link","to","fields","slug","date","excerpt"],"mappings":"6JAoBA,IAjBoB,SAAC,GAAD,IAAGA,EAAH,EAAGA,KAAH,OAClB,wBACGA,EAAKC,KAAI,SAAAC,GAAG,OACX,cACEC,UAAU,qGACVC,IAAKF,GAEJA,S,8ICJM,SAASG,EAAT,GAA4B,IAATC,EAAQ,EAARA,KAExBC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MAFuB,GAIdC,cAAS,CACjCC,aAAc,GACdC,MAHiB,KACZC,EAJiC,KAI1BC,EAJ0B,KAkChCH,EAAwBE,EAAxBF,aAAcC,EAAUC,EAAVD,MAEhBG,EADmBJ,GAhCN,KAgCuBC,EACTD,EAAeF,EAAMO,MAChDC,EAAQT,EAAQU,UAAYV,EAAQU,UAAUC,gBAAgBC,OAAS,KAE7E,OACE,QAAC,IAAD,CAAQC,iBAAiB,EAAOC,MAAM,UAAUL,MAAOA,EAAOM,SAAS,aACrE,eAAKnB,UAAU,8BAEb,kBAAQA,UAAU,eAChB,cAAIA,UAAU,SAAd,aAGF,eAAKA,UAAU,SACb,eAAKoB,MAAM,uFACT,iBAAOA,MAAM,oFACNC,GAAG,SAASC,KAAK,OAAOC,YAAY,SAASC,SAzCpC,SAAAC,GACxB,IAAMjB,EAAQiB,EAAMC,OAAOC,MAGrBpB,GAFQF,EAAMO,OAAS,IAEFgB,QAAO,SAAAC,GAAQ,MAEHA,EAAKC,KAAKC,YAAvCC,EAFgC,EAEhCA,YAAad,EAFmB,EAEnBA,MAAOrB,EAFY,EAEZA,KAC5B,OAGEmC,EAAYC,cAAcC,SAAS1B,EAAMyB,gBACzCf,EAAMe,cAAcC,SAAS1B,EAAMyB,gBAClCpC,GAAQA,EACNsC,KAAK,IACLF,cACAC,SAAS1B,EAAMyB,kBAItBvB,EAAS,CACPF,QACAD,qBAsBM,eAAKa,MAAM,QACT,kBAAQA,MAAM,kIACZ,QAAC,MAAD,UAMPT,EAAMb,KAAI,gBAAGgC,EAAH,EAAGA,KAAH,OACT,oBACE,QAAC,EAAAM,KAAD,CAAMC,GAAIP,EAAKQ,OAAOC,OACpB,eAAKvC,UAAU,QAAQC,IAAK6B,EAAKT,KAC/B,kBACGS,EAAKC,YAAYb,MAAO,KACzB,gBAAMlB,UAAU,kCAAhB,KACK8B,EAAKC,YAAYS,QAGxB,aAAGxC,UAAU,WAAW8B,EAAKC,YAAYC,YAAcF,EAAKC,YAAYC,YAAcF,EAAKW,YAG/F,cAAIzC,UAAU,oBACX8B,EAAKC,YAAYlC,OAAQ,QAAC,IAAD,CAAaA,KAAMiC,EAAKC,YAAYlC","file":"component---src-pages-writing-js-c9d6bbcd6d721d8afaf8.js","sourcesContent":["import React from \"react\"\nimport { ProjectType } from \"../../types\"\n\nconst ProjectTags = ({ tags }) => (\n  <>\n    {tags.map(tag => (\n      <li\n        className=\"inline-block px-3 py-1 mr-1 mt-1 font-medium text-xs rounded-lg border border-line text-front-text\"\n        key={tag}\n      >\n        {tag}\n      </li>\n    ))}\n  </>\n)\n\nProjectTags.propTypes = {\n  tags: ProjectType.tags,\n}\n\nexport default ProjectTags\n","import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../templates/layout\"\nimport ProjectTags from \"../components/projects/project-tags\"\nimport { FaSearch } from \"react-icons/fa\"\n\nexport default function Writing({ data }) {\n\n  const { profile, blogs } = data;\n  const emptyQuery = \"\"\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n\n  const handleSearchInput = event => {\n    const query = event.target.value\n    const posts = blogs.edges || []\n     // return all filtered posts\n    const filteredData = posts.filter(post => {\n      // destructure data from post frontmatter\n      const { description, title, tags } = post.node.frontmatter\n      return (\n        // standardize data with .toLowerCase()\n        // return true if the description, title or tags contains the query string\n        description.toLowerCase().includes(query.toLowerCase()) ||\n        title.toLowerCase().includes(query.toLowerCase()) ||\n        (tags && tags\n          .join(\"\") // convert tags from an array to string\n          .toLowerCase()\n          .includes(query.toLowerCase()))\n      )\n    })\n    // update state according to the latest query and results\n    setState({\n      query, // with current query string from the `Input` event\n      filteredData, // with filtered data from posts.filter(post => (//filteredData)) above\n    })\n  }\n\n  const { filteredData, query } = state\n  const hasSearchResults = filteredData && (query !== emptyQuery)\n  const posts = hasSearchResults ? filteredData : blogs.edges\n  const image = profile.seo_image ? profile.seo_image.childImageSharp.resize : null\n\n  return (\n    <Layout sidebarOnMobile={false} title=\"Writing\" image={image} pathname=\"/writing\">\n      <div className=\"lg:w-2/3 lg:pl-8 xl:pl-12\">\n        \n        <header className=\"prose mb-6\">\n          <h1 className=\"prose\">Writing</h1>\n        </header>\n\n        <div className=\"mb-6\">\n          <div class=\"bg-back-2 text-front-text flex items-center rounded-md shadow w-full lg:w-3/5 h-10\">\n            <input class=\"bg-back-2 rounded-l-full w-full h-full py-4 px-6 leading-tight focus:outline-none\"\n                   id=\"search\" type=\"text\" placeholder=\"Search\" onChange={handleSearchInput}/>\n\n            <div class=\"p-4\">\n              <button class=\"bg-front-2 text-back-2 rounded-full p-2 hover:bg-opacity-75 focus:outline-none w-full h-full flex items-center justify-center\">\n                <FaSearch />\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        {posts.map(({ node }) => (\n          <div>\n            <Link to={node.fields.slug}>\n              <div className=\"prose\" key={node.id}>\n                <h4>\n                  {node.frontmatter.title}{\" \"}\n                  <span className=\"italic text-sm text-front-text\">\n                    â€” {node.frontmatter.date}\n                  </span>\n                </h4>\n                <p className=\"text-sm\">{node.frontmatter.description ? node.frontmatter.description : node.excerpt}</p>\n              </div>\n            </Link>\n            <ul className=\"pr-2 mb-6 italic\">\n              {node.frontmatter.tags && <ProjectTags tags={node.frontmatter.tags} />}\n            </ul>\n          </div>\n          ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    profile: profileYaml {\n      ...ProfileFragment\n    }\n    blogs: allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            description\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 90)\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}