{"version":3,"sources":["webpack:///./src/components/projects/project-tags.js","webpack:///./src/pages/writing.js"],"names":["ProjectTags","tags","map","tag","className","key","Writing","blogs","data","useState","filteredData","query","state","setState","posts","edges","class","id","type","placeholder","onChange","event","target","value","filter","post","node","frontmatter","description","title","toLowerCase","includes","join","to","fields","slug","date","excerpt"],"mappings":"4FAAA,iDAoBeA,IAjBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,8BACGA,EAAKC,KAAI,SAAAC,GAAG,OACX,kBACEC,UAAU,qFACVC,IAAKF,GAEJA,S,kCCVT,iKAMe,SAASG,EAAT,GAA4B,IAEjCC,EAFgC,EAARC,KAExBD,MAFgC,EAIdE,mBAAS,CACjCC,aAAc,GACdC,MAHiB,KACZC,EAJiC,KAI1BC,EAJ0B,KAkChCH,EAAwBE,EAAxBF,aAAcC,EAAUC,EAAVD,MAEhBG,EADmBJ,GAhCN,KAgCuBC,EACTD,EAAeH,EAAMQ,MAEtD,OACE,YAAC,IAAD,KACE,mBAAKX,UAAU,6BAEb,sBAAQA,UAAU,cAChB,kBAAIA,UAAU,SAAd,YAGF,mBAAKA,UAAU,QACb,mBAAKY,MAAM,8EACT,qBAAOA,MAAM,4FACNC,GAAG,SAASC,KAAK,OAAOC,YAAY,SAASC,SAxCpC,SAAAC,GACxB,IAAMV,EAAQU,EAAMC,OAAOC,MAGrBb,GAFQH,EAAMQ,OAAS,IAEFS,QAAO,SAAAC,GAAQ,MAEHA,EAAKC,KAAKC,YAAvCC,EAFgC,EAEhCA,YAAaC,EAFmB,EAEnBA,MAAO5B,EAFY,EAEZA,KAC5B,OAGE2B,EAAYE,cAAcC,SAASpB,EAAMmB,gBACzCD,EAAMC,cAAcC,SAASpB,EAAMmB,gBAClC7B,GAAQA,EACN+B,KAAK,IACLF,cACAC,SAASpB,EAAMmB,kBAItBjB,EAAS,CACPF,QACAD,oBAqBM,mBAAKM,MAAM,OACT,sBAAQA,MAAM,yIACZ,YAAC,IAAD,UAMPF,EAAMZ,KAAI,gBAAGwB,EAAH,EAAGA,KAAH,OACT,uBACE,YAAC,OAAD,CAAMO,GAAIP,EAAKQ,OAAOC,MACpB,mBAAK/B,UAAU,QAAQC,IAAKqB,EAAKT,IAC/B,sBACGS,EAAKC,YAAYE,MAAO,IACzB,oBAAMzB,UAAU,6BAAhB,KACKsB,EAAKC,YAAYS,OAGxB,iBAAGhC,UAAU,WAAWsB,EAAKC,YAAYC,YAAcF,EAAKC,YAAYC,YAAcF,EAAKW,WAG/F,kBAAIjC,UAAU,oBACXsB,EAAKC,YAAY1B,MAAQ,YAAC,IAAD,CAAaA,KAAMyB,EAAKC,YAAY1B,cASrE,IAAMU,EAAK","file":"component---src-pages-writing-js-1788f1c408e5a5ddfef6.js","sourcesContent":["import React from \"react\"\nimport { ProjectType } from \"../../types\"\n\nconst ProjectTags = ({ tags }) => (\n  <>\n    {tags.map(tag => (\n      <li\n        className=\"inline-block px-3 py-1 mr-1 mt-1 font-medium text-xs rounded-lg border border-line\"\n        key={tag}\n      >\n        {tag}\n      </li>\n    ))}\n  </>\n)\n\nProjectTags.propTypes = {\n  tags: ProjectType.tags,\n}\n\nexport default ProjectTags\n","import React, { useState } from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../templates/layout\"\nimport ProjectTags from \"../components/projects/project-tags\"\nimport { FaSearch } from \"react-icons/fa\"\n\nexport default function Writing({ data }) {\n\n  const { blogs } = data;\n  const emptyQuery = \"\"\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n\n  const handleSearchInput = event => {\n    const query = event.target.value\n    const posts = blogs.edges || []\n     // return all filtered posts\n    const filteredData = posts.filter(post => {\n      // destructure data from post frontmatter\n      const { description, title, tags } = post.node.frontmatter\n      return (\n        // standardize data with .toLowerCase()\n        // return true if the description, title or tags contains the query string\n        description.toLowerCase().includes(query.toLowerCase()) ||\n        title.toLowerCase().includes(query.toLowerCase()) ||\n        (tags && tags\n          .join(\"\") // convert tags from an array to string\n          .toLowerCase()\n          .includes(query.toLowerCase()))\n      )\n    })\n    // update state according to the latest query and results\n    setState({\n      query, // with current query string from the `Input` event\n      filteredData, // with filtered data from posts.filter(post => (//filteredData)) above\n    })\n  }\n\n  const { filteredData, query } = state\n  const hasSearchResults = filteredData && (query !== emptyQuery)\n  const posts = hasSearchResults ? filteredData : blogs.edges\n\n  return (\n    <Layout>\n      <div className=\"lg:w-2/3 lg:pl-8 xl:pl-12\">\n        \n        <header className=\"prose mb-6\">\n          <h1 className=\"prose\">Writing</h1>\n        </header>\n\n        <div className=\"mb-6\">\n          <div class=\"bg-back-secondary flex items-center rounded-md shadow w-full lg:w-3/5 h-10\">\n            <input class=\"bg-back-secondary rounded-l-full w-full h-full py-4 px-6 leading-tight focus:outline-none\"\n                   id=\"search\" type=\"text\" placeholder=\"Search\" onChange={handleSearchInput}/>\n\n            <div class=\"p-4\">\n              <button class=\"bg-primary text-back-secondary rounded-full p-2 hover:bg-opacity-75 focus:outline-none w-full h-full flex items-center justify-center\">\n                <FaSearch />\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        {posts.map(({ node }) => (\n          <div>\n            <Link to={node.fields.slug}>\n              <div className=\"prose\" key={node.id}>\n                <h4>\n                  {node.frontmatter.title}{\" \"}\n                  <span className=\"italic text-sm text-front\">\n                    â€” {node.frontmatter.date}\n                  </span>\n                </h4>\n                <p className=\"text-sm\">{node.frontmatter.description ? node.frontmatter.description : node.excerpt}</p>\n              </div>\n            </Link>\n            <ul className=\"pr-2 mb-6 italic\">\n              {node.frontmatter.tags && <ProjectTags tags={node.frontmatter.tags} />}\n            </ul>\n          </div>\n          ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    blogs: allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            description\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 90)\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}